00 Docker - архітектура контейнеризації -----------------------------------------------------------------------------------------------------

  - Щоб не робити віртуальні машини, ос і тд
  - Докер - потребує мінімум ресурсів, можна запускати декілька контейнерів одразу, на відміну від віртуальних машин

  - container runtime - середовище запуску: або фаза роботи програми, або середовище мови для запуску програми

01 Створення імеджу -------------------------------------------------------------------------------------------------------------------------

  - Створюємо в корені докерфайл
  - Білдимо імедж: sudo docker build -t notesapp:v1.0.0 . 
  - Запускаємо: sudo docker run -p 8080:8080 notesapp:v1.0.0 
  - Тепер сервер запущений з контейнеру, можна звертатись з постману
  - Тобто зараз нода крутиться в нашому контейнері

  - Поки контейнер працює, можемо подивитись з іншої консолі, які контейнери запущені:
  sudo docker container ls
  - sudo docker info - інфа про докер на нашому компі

  - 

Після створення файла index.py та Dockerfile вручну, ми в терміналі на папці
проекту запустили команду "docker build ." після чого йшов процесс
доволі довгий у консолі.

Потім командою "docker image ls" дивимося айді нашого імеджа, щойно створенного

Потім пишемо "docker run ID"
Після чого отримали бажану надпис у консолі терміналу

---------------------------------------------------------------------------------------

Беремо готові налаштування node.js
Пишемо у гуглі "docker hub node" та переходимо на https://hub.docker.com/_/node
Це по типу репозиторіїв з образами імеджами, з командами пулу (різні версії нижче)

Беремо верхню команду, останню версію і запускаємо в терміналі - в корні
Тим самим ми скачали цей імедж на комп, подивитися імеджі на компі:
"docker images"

Запускаємо контейнер або за айді, або за назвою "node"- docker run node 
- реакції нема, запущених контейнерів нема.

docker ps - дивитися список контейнерів (запущених)
docker ps --help - дивитися документацію по цій команді, різні опції, ключі
docker ps -a дивитися список усіх контейнерів (також незапущених)

Запущениц конейнер самозавершився, тому що нічого йому було робити - нічого не вказано
Запуск в інтерактивную консоль:
docker run -it node - там вже пишемо команди ноди, наприклад 1+1
Тобто ми знаходимось всердині контейнера, в якому запущений нод.жс
Щоб вийти пишемо .exit та потрапляємо в локальну консоль

Видалити контейнер, т.я. вони копляться - docker rm ID

---------------------------------------------------------------------------------------
It-Proger Course
_______________________________________________________________________________________

Команда:
docker run -d -p 80:80 docker/getting-started
-d, --detach - запустить контейнер/проект в фоні, не заважає писати код в консолі
-p - з'єднати порти чи щось таке :) 80:80 приписуємо ці порти
Перша 80 - локальна машина, друга 80 внутри проекта, тобто ми зв'язуємо нашу машину по порту 80
з портом 80 внутри додатка
docker/getting-started - назва контейнера/проекта

docker run --help - покаже усі опції команди ран

Після запуску "docker run -d -p 80:80 docker/getting-started"
В консолі пишеться, що не знайдено цього образа локально, завантажує його пулами та запускає, тому що команда ран :)

docker info - Показує скільки чого є, запущено і тд

localhosh:80 - надпис в адресі браузера, запускає наш імедж у браузері

Команди stop/start ID зупинити/запустити контейнер pause/unpause

Урок 3:
Імедж,образ - готовий проект, містить готовий функціонал, на основі якого ми створюємо
вже свій проект.

Контейнер - упаковка всього додатка - імеджі, плюс наші файли

Client - виконує комнади билд, пул, ран
Docker_host - приймає ці команди, розуміє що хоче кліент(daemon, container, images)
Registy - де зберігаються образи

daemon - проміжний функціонал, який розуміє команду, та знаходить образ тощо

Якщо робити run образу, тоді ми його запускаємо вже як додаток/контейнер

-it інтерактивний режим, для взаємодії
--name "NAME" - додати ім'я

При кожному запуску образу run буде створюватись новий контейнер

Команда запустить джаву, запулену раніше:
docker run -it --name MyJava openjdk

Щоб вийти з джави: ctrl+d

Для запуску контейнера команда start/stop (pause/unpause)
Команда kill - грубо вийти/закрити контейнер, якщо контейнер не відповідає

-----------------------------------------------------------------------------------------
Качаємо образ убунти:
docker pull ubuntu

Запускаємо його:
docker run -it --name MyUbuntu ubuntu

-------------------------------------------------------------------------------
Нарешті будемо робити проект :)

- Створили вручну 2 файла, докер і джава
- запускаємо білд docker build .
- створився імедж, удаляємо його docker image rm ID
- видалили щоб додати порт в докерфайл

- знову білд docker build .
- запускаємо docker run -p 3001:8001 ID